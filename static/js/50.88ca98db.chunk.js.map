{"version":3,"file":"static/js/50.88ca98db.chunk.js","mappings":"sQACA,EAAsB,8BAAtB,EAA4D,gCAA5D,EAA6G,yCAA7G,EAAgK,kC,SCQnJA,EAAmB,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAChC,GAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAA4CJ,EAAAA,EAAAA,WAAS,GAArD,eAAOK,EAAP,KAAuBC,EAAvB,KACA,GAAgCN,EAAAA,EAAAA,UAAS,MAAzC,eAAOO,EAAP,KAAiBC,EAAjB,KAEMC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,GAEzBC,EAAiB,SAACC,GACtBL,EAAYK,EACb,EAMKC,GAAoBC,EAAAA,EAAAA,cAAY,WACpC,IAAMC,EAAcC,EAAAA,EAAAA,KAAW,aACzBC,EAAsBT,EAAWU,QAAO,SAAAC,GAAM,OACpDJ,EAAYK,SAASD,EAAOP,GADwB,IAG9CS,EAASvB,GAAQwB,EAAAA,EAAAA,GAAcL,EAAqBnB,GAASmB,EAE7DM,EAAgC,GAAlBrB,EAAa,GAC3BsB,EAAWC,KAAKC,IAAIH,EAAa,EAAGF,EAAOM,QACjDtB,EAAkBmB,EAAWH,EAAOM,QAEpC,IAAMC,EAAcP,EAAOQ,MAAM,EAAGL,GACpCvB,EAAkB2B,EACnB,GAAE,CAACpB,EAAYV,EAAOI,IAMvB,OAJA4B,EAAAA,EAAAA,YAAU,WACRjB,GACD,GAAE,CAACP,EAAUJ,EAAYJ,EAAOe,KAG7B,8BAC6B,IAA1Bb,EAAe2B,QAAiB7B,GAK7B,iBAAKiC,UAAWC,EAAhB,WACI,eAAID,UAAWC,EAAf,SACKhC,EAAeiC,KAAI,SAACd,GAAD,OAClB,SAACe,EAAA,EAAD,CACAf,OAAQA,EACRP,GAAIO,EAAOP,GACXuB,eAAgBxB,GAJE,MASvBP,IACD,mBAAQgC,KAAK,SAASL,UAAWC,EAC/BK,QA3CS,WACvBlC,GAAc,SAAAmC,GAAS,OAAIA,EAAY,CAAhB,GACxB,EAwCa,SAEC,kBAlBL,eAAIP,UAAWC,EAAf,SAA0B,8EA0BrC,ECvCD,EA3BkB,WAChB,OAA0BjC,EAAAA,EAAAA,YAA1B,eAAOD,EAAP,KAAcyC,EAAd,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAYjC,EAAAA,EAAAA,IAAYkC,EAAAA,GAU9B,OAJAb,EAAAA,EAAAA,YAAU,WACRU,GAASI,EAAAA,EAAAA,KACV,GAAE,CAACJ,KAGF,iCACE,yBAAME,IAAa,uBAAG,8BACtB,SAACG,EAAA,EAAD,CACEC,SAZe,SAACC,GACpBR,EAASQ,EACV,KAYG,SAAClD,EAAD,CACEC,MAAOA,MAId,C","sources":["webpack://react-homework-template/./src/components/AdvertsFavorites/AdvertsFavorites.module.css?e052","components/AdvertsFavorites/AdvertsFavorites.jsx","pages/Favorites.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"box\":\"AdvertsFavorites_box__6uU+S\",\"title\":\"AdvertsFavorites_title__KS13U\",\"advertsGallery\":\"AdvertsFavorites_advertsGallery__ZuOpR\",\"loadBtn\":\"AdvertsFavorites_loadBtn__ImT8z\"};","import { useState, useEffect, useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport { selectAllTAdverts } from \"../../redux/adverts/selectors\";\nimport local from \"../../servise/localStorage\";\nimport {AdvertsGalleryItem} from '../AdvertsGalleryItem/AdvertsGalleryItem';\nimport { selectByQuery } from \"js/func/selectByQuery\";\nimport css from './AdvertsFavorites.module.css';\n\nexport const AdvertsFavorites = ({query}) => {\n  const [visibleAdverts, setVisibleAdverts] = useState([]);\n  const [numberPart, setNumberPart] = useState(1);\n  const [visibleLoadBtn, setVisibleLoadBtn] = useState(false);\n  const [switcher, setSwitcher] = useState(null);\n\n  const allAdverts = useSelector(selectAllTAdverts);\n\n  const changeSwitcher = (id) => {\n    setSwitcher(id);\n  };\n\n  const changeNumberPart = () => {\n    setNumberPart(prevState => prevState + 1);\n  };\n\n  const getVisibleAdverts = useCallback(() => {\n    const idFavorites = local.load('favorites');\n    const allAdvertsFavorites = allAdverts.filter(advert => \n    idFavorites.includes(advert.id));\n\n    const result = query ? selectByQuery(allAdvertsFavorites, query) : allAdvertsFavorites;\n\n    const startIndex = (numberPart - 1) * 8;\n    const endIndex = Math.min(startIndex + 8, result.length);\n    setVisibleLoadBtn(endIndex < result.length);\n\n    const partAdverts = result.slice(0, endIndex);\n    setVisibleAdverts(partAdverts);\n  }, [allAdverts, query, numberPart]);\n\n  useEffect(() => {\n    getVisibleAdverts();\n  }, [switcher, numberPart, query, getVisibleAdverts]);\n  \n  return (\n      <>\n        {visibleAdverts.length === 0 && !query ?\n            <h1 className={css.title}>\n                Favorites list is still empty. Choose your favorite cars in the catalog!\n            </h1>\n            : \n            <div className={css.box}>       \n                <ul className={css.advertsGallery}>\n                    {visibleAdverts.map((advert) => (\n                      <AdvertsGalleryItem\n                      advert={advert}\n                      id={advert.id}\n                      followFavorite={changeSwitcher}\n                    />\n                    ))}\n                </ul>\n\n                {visibleLoadBtn && \n                <button type='button' className={css.loadBtn}\n                  onClick={changeNumberPart}\n                >\n                  Load more\n                </button>\n                }            \n            </div>\n        }\n      </>   \n    )\n};\n\nAdvertsFavorites.propTypes = {\n  query: PropTypes.object,\n};","import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectIsLoading } from \"../redux/adverts/selectors\";\nimport { fetchAdverts } from \"../redux/adverts/operations\";\nimport { SearchBar } from \"components/SearchBar/SearchBar\";\nimport { AdvertsFavorites } from \"../components/AdvertsFavorites/AdvertsFavorites\";\n\nconst Favorites = () => {\n  const [query, setQuery] = useState();\n\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  const handleSearch = (search) => {\n    setQuery(search);\n  };\n\n  useEffect(() => {\n    dispatch(fetchAdverts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div>{isLoading && <b>Request in progress...</b>}</div>\n      <SearchBar\n        onSubmit={handleSearch}\n      />\n      <AdvertsFavorites\n        query={query}\n      />\n    </>\n  )\n};\n\nexport default Favorites;"],"names":["AdvertsFavorites","query","useState","visibleAdverts","setVisibleAdverts","numberPart","setNumberPart","visibleLoadBtn","setVisibleLoadBtn","switcher","setSwitcher","allAdverts","useSelector","selectAllTAdverts","changeSwitcher","id","getVisibleAdverts","useCallback","idFavorites","local","allAdvertsFavorites","filter","advert","includes","result","selectByQuery","startIndex","endIndex","Math","min","length","partAdverts","slice","useEffect","className","css","map","AdvertsGalleryItem","followFavorite","type","onClick","prevState","setQuery","dispatch","useDispatch","isLoading","selectIsLoading","fetchAdverts","SearchBar","onSubmit","search"],"sourceRoot":""}